#pragma once
#include <vector>
#include <string>
#include <stdarg.h>

namespace MC {
	enum DataType
	{
		NULL_TYPE = 0,
		BYTE_TYPE,
		CHAR_TYPE,
		SHORT_TYPE,
		INT_TYPE,
		BOOL_TYPE,
		LONG_TYPE,
		FLOAT_TYPE,
		DOUBLE_TYPE,
		STRING_TYPE,
		PRIMARY_TYPE,
		COMPLEX_TYPE,
		CLASS_OR_INTERFACE_TYPE,
		CLASS_TYPE,
		INTERFACE_TYPE,
		ARRAY_TYPE,
		GENERIC_TYPE, //32bit system: 4 bytes address, 64bit system: 8 bytes address
		AUTO_TYPE,
		VOID_TYPE,
		UNKNOWN_TYPE,

	};
	enum IFClass
	{
		UNKNOWN_IF_CLASS = 0,
		IS_CLASS,
		IS_INTERFACE
	};
	
	
	enum OPType
	{
		OP_MINUS = 0,
		OP_MINUS_MINUS,
		OP_EXCLAM,
		OP_EXCLAM_EQ,
		OP_PERCENT,
		OP_PERCENT_EQ,
		OP_AMP,
		OP_AMP_AMP,
		OP_AMP_EQ,
		OP_TIMES,
		OP_TIMES_EQ,
		OP_DIV,
		OP_DIV_EQ,
		OP_CARET,
		OP_CARET_EQ,
		OP_PIPE,
		OP_PIPE_EQ,
		OP_PIPE_PIPE,
		OP_TILDE,
		OP_PLUS,
		OP_PLUS_PLUS,
		OP_PLUS_EQ,
		OP_LT,
		OP_LT_LT,
		OP_LT_LT_EQ,
		OP_LT_EQ,
		OP_EQ,
		OP_MINUS_EQ,
		OP_EQ_EQ,
		OP_GT,
		OP_GT_EQ,
		OP_GT_GT,
		OP_GT_GT_EQ,
		OP_GT_GT_GT,
		OP_GT_GT_GT_EQ,
		OP_LBRACKET,
		OP_LPAREN,
		OP_INSTANCE_OF,
	};
	enum NodeType
	{
		formal_parameter_list_with_vararg_product_type,
		method_declarator_product_type,
		operator_header_product_type,
		method_declaration_method_product_type,
		method_declaration_operator_product_type,
		const_declaration_product_type,
		class_body_without_body_product_type,
		class_body_with_body_product_type,
		array_type_primitive_product_type,
		auto_type_product_type,
		array_type_product_type,
		class_or_interface_type_product_type,
		type_primitive_product_type,
		array_type_class_interface_product_type,
		package_declaration_product_type,
		single_type_import_declaration_product_type,
		type_import_on_demand_declaration_product_type,
		modifiers_product_type,
		super_product_type,
		conditional_expression_onditional_or_expression_product_type,
		conditional_expression_question_expression,
		field_access_primary_product_type,
		field_access_super_product_type,
		array_access_name_expression_product_type,
		array_access_primary_expression_product_type,
		primary_no_new_array_literal_product_type,
		primary_no_new_array_this_product_type,
		primary_no_new_array_expression_product_type,
		method_invocation_name_product_type,
		method_invocation_primary_product_type,
		variable_declarators_product_type,
		method_invocation_super_product_type,
		field_declaration_product_type,
		class_instance_creation_expression_new_product_type,
		argument_list_product_type,
		array_creation_expression_new_primitive_type_product_type,
		array_creation_expression_new_pclass_or_interface_type_product_type,
		assignment_product_type,
		dim_exprs_product_type,
		conditional_expression_question_expression_product_type,
		conditional_or_expression_conditional_or_expression_product_type,
		conditional_and_expression_conditional_and_expression_product_type,
		inclusive_or_expression_inclusive_or_expression_product_type,
		exclusive_or_expression_exclusive_or_expression_product_type,
		and_expression_and_expression_product_type,
		equality_expression_eq_product_type,
		equality_expression_noteq_product_type,
		relational_expression_lt_product_type,
		relational_expression_gt_product_type,
		relational_expression_lteq_product_type,
		relational_expression_gteq_product_type,
		relational_expression_instanceof_product_type,
		shift_expression_ltlt_product_type,
		dim_expr_product_type,
		field_access_product_type,
		shift_expression_gtgt_product_type,
		shift_expression_gtgtgt_product_type,
		additive_expression_plus_product_type,
		additive_expression_minus_product_type,
		multiplicative_expression_times_product_type,
		multiplicative_expression_div_product_type,
		multiplicative_expression_percent_product_type,
		unary_expression_plus_product_type,
		unary_expression_minus_product_type,
		pre_increment_expression_product_type,
		pre_decrement_expression_product_type,
		unary_expression_not_plus_minus_tilde_product_type,
		unary_expression_not_plus_minus_exclam_product_type,
		post_increment_expression_product_type,
		post_decrement_expression_product_type,
		cast_expression_primitive_dims_product_type,
		cast_expression_primitive_product_type,
		cast_expression_expression_product_type,
		cast_expression_name_dims_product_type,
		formal_parameter_list_product_type,
		variable_declarator_product_type,
		static_initializer_product_type, 
		formal_parameter_product_type,
		variable_declarator_id_product_type,
		class_type_list_product_type,
		throws_product_type,
		method_header_non_generic_product_type,
		method_header_generic_product_type,
		method_body_product_type,
		block_product_type,
		block_statements_product_type,
		local_variable_declaration_statement_product_type,
		local_variable_declaration_product_type,
		empty_statement_product_type,
		labeled_statement_product_type,
		labeled_statement_no_short_if_product_type,
		expression_statement_product_type,
		if_then_statement_product_type,
		if_then_else_statement_product_type,
		if_then_else_statement_no_short_if_product_type,
		switch_statement_product_type,
		switch_label_case_product_type,
		switch_label_default_product_type,
		switch_labels_product_type,
		switch_block_statement_group_product_type,
		switch_block_statement_groups_product_type,
		switch_block_product_type,
		while_statement_product_type,
		while_statement_no_short_if_product_type,
		do_statement_product_type,
		statement_expression_list_product_type,
		for_statement_product_type,
		for_statement_no_short_if_product_type,
		break_statement_product_type,
		continue_statement_product_type,
		return_statement_product_type,
		throw_statement_product_type,
		synchronized_statement_product_type,
		try_statement_product_type,
		catches_product_type,
		catchclause_product_type,
		finally_product_type,
		constructor_cast_declarator_product_type,
		constructor_body_block_statements_product_type,
		explicit_constructor_invocation_super_product_type,
		explicit_constructor_invocation_this_product_type,
		constructor_body_product_type,
		constructor_declaration_product_type,
		class_body_declarations_product_type,
		interfaces_product_type,
		interface_type_list_product_type,
		non_generic_class_declaration_product_type,
		generic_class_declaration_product_type,
		type_parameter_list_product_type,
		non_generic_interface_declaration_product_type,
		generic_interface_declaration_product_type,
		extends_interfaces_product_type,
		postfix_expression_name_product_type,
		constant_declaration_product_type,
		abstract_method_declaration_product_type,
		array_initializer_product_type,
		variable_initializers_product_type,
		interface_member_declarations_product_type,
		interface_body_product_type,
		interface_declaration_product_type,
		type_declarations_product_type,
		import_declarations_product_type,
		compilation_unit_product_type,
		type_argument_list_product_type,
		ype_parameters_product_type,
		type_parameter_without_type_bound_product_type,
		type_parameter_with_type_bound_product_type,
		type_bound_without_addition_bound_product_type,
		type_bound_with_addition_bound_product_type,
		addition_bound_product_type,
		method_body_empty_product_type,
		method_body_block_product_type,
		method_body_property_product_type,
		property_block_product_type,
		for_init_statement_expression_list,
		for_init_local_variable_declaration,
		for_update_product_type,
		constant_expression_product_type,
		expression_product_type,
		left_hand_side_name_product_type,
		left_hand_side_field_product_type,
		left_hand_side_array_product_type,
		bin_expression_product_type,
		unary_expression_product_type,	
		type_declaration_product_type,
		type_declarations_empty_product_type,
		type_parameters_product_type,
		type_arguments_product_type,
		reference_type_class_or_interface_type_product_type,
		reference_type_array_type_product_type,
		class_type_product_type,
		interface_type_product_type,
		formal_parameter_list_without_vararg_product_type,
		generic_type_product_type,
		method_invocation_generic_name_product_type,
		method_invocation_primary_generic_product_type,		
		method_invocation_super_generic_product_type,
		type_reference_type_product_type,
		type_auto_type_product_type,
		type_generic_type_product_type,
		constructor_cast_generic_declarator_product_type,
	};

	enum EModifier
	{
		PUBLIC_MODIFIER = 1,
		PROTECTED_MODIFIER = 1 << 1,
		PRIVATE_MODIFIER = 1 << 2,
		STATIC_MODIFIER = 1 << 3,
		ABSTRACT_MODIFIER = 1 << 4,
		FINAL_MODIFIER = 1 << 5,
		NATIVE_MODIFIER = 1 << 6,
		SYNCHRONIZED_MODIFIER = 1 << 7,
		TRANSIENT_MODIFIER = 1 << 8,
		VOLATILE_MODIFIER = 1 << 9,
		CONST_MODIFIER = 1 << 10,
	};
}